@{
    ViewData["Title"] = "Thống kê";
    Layout = "~/Areas/AdminSystem/Views/Shared/_Admin.cshtml";

    var isDateRange = !string.IsNullOrEmpty(ViewBag.FromDate) && !string.IsNullOrEmpty(ViewBag.ToDate);
    var quarter = Context.Request.Query["quarter"].ToString();
    var year = Context.Request.Query["year"].ToString();
    var day = Context.Request.Query["day"].ToString();
    var fromDate = Context.Request.Query["fromDate"].ToString();
    var toDate = Context.Request.Query["toDate"].ToString();
    var month = Context.Request.Query["month"].ToString();
    var departmentId = Context.Request.Query["departmentId"].ToString();
    var filterType = Context.Request.Query["filterType"].ToString();
}

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Thống kê</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Dashboard", new { area = "AdminSystem" })">AdminSystem</a></li>
                    <li class="breadcrumb-item active">Thống kê</li>
                </ol>
            </div>
        </div>
    </div>
</div>

<!-- Filter and Export Section -->
<section class="content">
    <div class="container-fluid">
        <div class="row align-items-end mb-3">
            <div class="col-auto">
                <a href="@Url.Action("ExportToExcel", new { day = day, fromDate = fromDate, toDate = toDate, month = month, quarter = quarter, year = year, filterType = filterType, departmentId = departmentId })" class="btn btn-success btn-export"><i class="bi bi-file-earmark-excel"></i> Xuất Excel</a>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseWidthExample" aria-expanded="false" aria-controls="collapseWidthExample">
                    Lọc
                </button>
            </div>
            <!-- Department Filter (outside collapsible form) -->
            <div class="col-auto">
                <select id="departmentId" name="departmentId" class="form-select">
                    <option value="">Tất cả phòng ban</option>
                    @foreach (var dept in ViewBag.Departments)
                    {
                        <option value="@dept.Id">@dept.Name</option>
                    }
                </select>
            </div>
            <div class="col">
                <div class="collapse collapse-horizontal" id="collapseWidthExample">
                    <div class="">
                        <form method="get" action="@Url.Action("Index")" id="filterForm">
                            <div class="row gx-2 gy-2 align-items-end">
                                <!-- Loại lọc -->
                                <div class="col-md-2" id="filterTypeContainer">
                                    <select id="filterType" name="filterType" class="form-select">
                                        <option value="">Chọn loại lọc</option>
                                        <option value="day">Ngày</option>
                                        <option value="dateRange">Từ ngày/Đến ngày</option>
                                        <option value="month">Tháng</option>
                                        <option value="quarter">Quý</option>
                                        <option value="year">Năm</option>
                                    </select>
                                </div>
                                <!-- Ngày -->
                                <div class="col-md-2" id="dayFilter" style="display: none;">
                                    <input type="date" id="day" name="day" class="form-control" value="@day" />
                                </div>
                                <!-- Từ ngày -->
                                <div class="col-md-2" id="fromDateFilter" style="display: none;">
                                    <input type="date" id="fromDate" name="fromDate" class="form-control" value="@fromDate" />
                                </div>
                                <!-- Đến ngày -->
                                <div class="col-md-2" id="toDateFilter" style="display: none;">
                                    <input type="date" id="toDate" name="toDate" class="form-control" value="@toDate" />
                                </div>
                                <!-- Tháng -->
                                <div class="col-md-2" id="monthFilter" style="display: none;">
                                    <input type="month" id="month" name="month" class="form-control" value="@month" />
                                </div>
                                <!-- Quý -->
                                <div class="col-md-2" id="quarterFilter" style="display: none;">
                                    <select id="quarter" name="quarter" class="form-select">
                                        <option value="">Chọn quý</option>
                                        <option value="1">Quý 1</option>
                                        <option value="2">Quý 2</option>
                                        <option value="3">Quý 3</option>
                                        <option value="4">Quý 4</option>
                                    </select>
                                </div>
                                <!-- Năm -->
                                <div class="col-md-2" id="yearFilter" style="display: none;">
                                    <select id="year" name="year" class="form-select">
                                        <option value="">Chọn năm</option>
                                        @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 5; i--)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </select>
                                </div>
                                <!-- Nút Reset và Collapse -->
                                <div class="col-md-1 d-flex float-right gap-2" id="buttonsContainer" style="display: none;">
                                    <a href="#" id="resetButton" class="btn btn-secondary me-2"><i class="bi bi-arrow-repeat"></i></a>
                                    <button class="btn btn-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseWidthExample" aria-expanded="false" aria-controls="collapseWidthExample">
                                        <i class="fa-solid fa-chevron-left"></i>
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <!-- Small boxes (Stat box) -->
        <div class="row">
            <div class="col-lg-3 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        <h3 id="totalJobs">@ViewBag.TotalJobs</h3>
                        <p>Tổng số công việc</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-clipboard"></i>
                    </div>
                    <a asp-controller="Jobs" asp-action="Index" class="small-box-footer">Xem chi tiết <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6">
                <div class="small-box bg-success">
                    <div class="inner">
                        <h3 id="completedJobs">@ViewBag.CompletedJobs</h3>
                        <p>Công việc hoàn thành</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-checkmark"></i>
                    </div>
                    <a asp-controller="Jobs" asp-action="Index" asp-route-status="1" class="small-box-footer">Xem chi tiết <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6">
                <div class="small-box bg-warning">
                    <div class="inner">
                        <h3 id="overdueJobs">@ViewBag.OverdueJobs</h3>
                        <p>Công việc quá hạn</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-alert"></i>
                    </div>
                    <a asp-controller="Jobs" asp-action="Index" asp-route-status="3" class="small-box-footer">Xem chi tiết <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6">
                <div class="small-box bg-danger">
                    <div class="inner">
                        <h3 id="totalCategories">@ViewBag.TotalCategories</h3>
                        <p>Danh mục công việc</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-folder"></i>
                    </div>
                    <a asp-controller="Categories" asp-action="Index" class="small-box-footer">Xem chi tiết <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
        </div>
        <!-- Main row -->
        <div class="row">
            <section class="col-lg-7 connectedSortable">
                <!-- Calendar -->
                <div class="card bg-gradient-success">
                    <div class="card-header border-0">
                        <h3 class="card-title">
                            <i class="far fa-calendar-alt"></i>
                            Lịch công việc
                        </h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-success btn-sm" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-success btn-sm" data-card-widget="remove">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body pt-0">
                        <div id="calendar" style="width: 100%; min-height:530px !important;"></div>
                        <div id="noCalendarDataMessage" class="text-center" style="@(ViewBag.CalendarJobs == "[]" ? "" : "display: none;")">
                            Không có sự kiện để hiển thị.
                        </div>
                    </div>
                </div>
            </section>
            <!-- Left col -->
            <section class="col-lg-5 connectedSortable">
                <!-- Score Trend Chart -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-chart-line mr-1"></i>
                            Xu hướng điểm số
                        </h3>
                    </div>
                    <div class="card-body">
                        <canvas id="scoreTrendChart"></canvas>
                        <div id="noDataMessage" class="text-center" style="@(ViewBag.Labels.Count == 0 ? "" : "display: none;")">
                            Không có dữ liệu để hiển thị.
                        </div>
                    </div>
                </div>
                <!-- Summary Score Chart -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-chart-bar mr-1"></i>
                            Tổng điểm đánh giá
                        </h3>
                    </div>
                    <div class="card-body">
                        <canvas id="summaryScoreChart"></canvas>
                        <div id="noSummaryDataMessage" class="text-center" style="@(ViewBag.Labels.Count == 0 ? "" : "display: none;")">
                            Không có dữ liệu để hiển thị.
                        </div>
                    </div>
                </div>
                <!-- Pie Chart: Job Status -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-chart-pie mr-1"></i>
                            Trạng thái công việc
                        </h3>
                    </div>
                    <div class="card-body">
                        <canvas id="jobStatusPieChart" style="min-height: 250px; height: 250px; max-height: 250px;"></canvas>
                        <div id="noJobStatusDataMessage" class="text-center" style="@((ViewBag.JobStatusOntime == 0 && ViewBag.JobStatusOverdue == 0 && ViewBag.JobStatusLate == 0 && ViewBag.JobStatusProcessing == 0) ? "" : "display: none;")">
                            Không có dữ liệu để hiển thị.
                        </div>
                    </div>
                </div>
                <!-- Bar Chart: Jobs by Period -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-chart-bar mr-1"></i>
                            Công việc theo khoảng thời gian
                        </h3>
                    </div>
                    <div class="card-body">
                        <canvas id="jobsByPeriodBarChart" style="min-height: 250px; height: 250px; max-height: 250px;"></canvas>
                        <div id="noJobPeriodDataMessage" class="text-center" style="@(ViewBag.JobMonths.Count == 0 ? "" : "display: none;")">
                            Không có dữ liệu để hiển thị.
                        </div>
                    </div>
                </div>
            </section>
            <!-- Right col -->
        </div>
        <!-- /.row (main row) -->
    </div><!-- /.container-fluid -->
</section>
<!-- /.content -->
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales/vi.js"></script>
    <script>
        // Initial data
        var isDateRange = @(isDateRange ? "true" : "false");
        var labels = @Html.Raw(Json.Serialize(ViewBag.Labels));
        var sumVolume = @Html.Raw(Json.Serialize(ViewBag.SumVolume));
        var sumProgress = @Html.Raw(Json.Serialize(ViewBag.SumProgress));
        var sumQuality = @Html.Raw(Json.Serialize(ViewBag.SumQuality));
        var sumSummary = @Html.Raw(Json.Serialize(ViewBag.SumSummary));
        var jobMonths = @Html.Raw(Json.Serialize(ViewBag.JobMonths));
        var jobCounts = @Html.Raw(Json.Serialize(ViewBag.JobCounts));
        var jobStatusOntime = @ViewBag.JobStatusOntime;
        var jobStatusOverdue = @ViewBag.JobStatusOverdue;
        var jobStatusLate = @ViewBag.JobStatusLate;
        var jobStatusProcessing = @ViewBag.JobStatusProcessing;
        var calendarJobs = @Html.Raw(ViewBag.CalendarJobs);
        var departmentId = '@departmentId';

        // Global chart and calendar variables
        var scoreTrendChart, summaryScoreChart, jobStatusPieChart, jobsByPeriodBarChart, calendar;

        // Function to initialize or update dashboard (charts and calendar)
        function initializeDashboard(data) {
            // Destroy existing charts and calendar if they exist
            if (scoreTrendChart) scoreTrendChart.destroy();
            if (summaryScoreChart) summaryScoreChart.destroy();
            if (jobStatusPieChart) jobStatusPieChart.destroy();
            if (jobsByPeriodBarChart) jobsByPeriodBarChart.destroy();
            if (calendar) calendar.destroy();

            // Update variables with new data
            labels = data.labels || [];
            sumVolume = data.sumVolume || [];
            sumProgress = data.sumProgress || [];
            sumQuality = data.sumQuality || [];
            sumSummary = data.sumSummary || [];
            jobMonths = data.jobMonths || [];
            jobCounts = data.jobCounts || [];
            jobStatusOntime = data.jobStatusOntime || 0;
            jobStatusOverdue = data.jobStatusOverdue || 0;
            jobStatusLate = data.jobStatusLate || 0;
            jobStatusProcessing = data.jobStatusProcessing || 0;
            calendarJobs = data.calendarJobs || [];
            isDateRange = data.isDateRange || false;
            departmentId = data.departmentId || '';

            // Update stat boxes
            $('#totalJobs').text(data.totalJobs || 0);
            $('#completedJobs').text(data.completedJobs || 0);
            $('#overdueJobs').text(data.overdueJobs || 0);
            $('#totalCategories').text(data.totalCategories || 0);

            // Show/hide no data messages
            const hasData = labels.length > 0;
            const hasJobStatusData = jobStatusOntime > 0 || jobStatusOverdue > 0 || jobStatusLate > 0 || jobStatusProcessing > 0;
            const hasJobPeriodData = jobMonths.length > 0 && jobCounts.length > 0;
            const hasCalendarData = calendarJobs.length > 0;

            $('#noDataMessage').css('display', hasData ? 'none' : 'block');
            $('#noSummaryDataMessage').css('display', hasData ? 'none' : 'block');
            $('#noJobStatusDataMessage').css('display', hasJobStatusData ? 'none' : 'block');
            $('#noJobPeriodDataMessage').css('display', hasJobPeriodData ? 'none' : 'block');
            $('#noCalendarDataMessage').css('display', hasCalendarData ? 'none' : 'block');

            // Score Trend Chart
            var ctx1 = document.getElementById('scoreTrendChart').getContext('2d');
            scoreTrendChart = new Chart(ctx1, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: hasData ? [
                        { label: 'Tổng Điểm Khối Lượng', data: sumVolume, borderColor: 'blue', fill: false },
                        { label: 'Tổng Điểm Tiến Độ', data: sumProgress, borderColor: 'green', fill: false },
                        { label: 'Tổng Điểm Chất Lượng', data: sumQuality, borderColor: 'red', fill: false }
                    ] : []
                },
                options: {
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Tổng điểm' } },
                        x: {
                            title: {
                                display: true,
                                text: isDateRange || (labels[0]?.includes('/') && labels[0]?.split('/').length === 3) ? 'Ngày' : 'Tháng/Năm'
                            }
                        }
                    }
                }
            });

            // Summary Score Chart
            var ctx2 = document.getElementById('summaryScoreChart').getContext('2d');
            summaryScoreChart = new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: hasData ? [
                        { label: 'Tổng Điểm Đánh Giá', data: sumSummary, backgroundColor: 'orange' }
                    ] : []
                },
                options: {
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Tổng điểm' } },
                        x: {
                            title: {
                                display: true,
                                text: isDateRange || (labels[0]?.includes('/') && labels[0]?.split('/').length === 3) ? 'Ngày' : 'Tháng/Năm'
                            }
                        }
                    }
                }
            });

            // Job Status Pie Chart
            var pieCtx = document.getElementById('jobStatusPieChart').getContext('2d');
            jobStatusPieChart = new Chart(pieCtx, {
                type: 'pie',
                data: {
                    labels: ['Hoàn thành', 'Chưa hoàn thành', 'Hoàn thành muộn', 'Đang xử lý'],
                    datasets: hasJobStatusData ? [{
                        data: [jobStatusOntime, jobStatusOverdue, jobStatusLate, jobStatusProcessing],
                        backgroundColor: ['#28a745', '#dc3545', '#ffc107', '#007bff'],
                        borderWidth: 1
                    }] : []
                },
                options: {
                    plugins: {
                        legend: { position: 'bottom' },
                        tooltip: { callbacks: { label: function(context) { return context.raw + ' công việc'; } } }
                    }
                }
            });

            // Jobs by Period Bar Chart
            var barCtx = document.getElementById('jobsByPeriodBarChart').getContext('2d');
            jobsByPeriodBarChart = new Chart(barCtx, {
                type: 'bar',
                data: {
                    labels: jobMonths,
                    datasets: hasJobPeriodData ? [{
                        label: 'Số lượng công việc',
                        data: jobCounts,
                        backgroundColor: '#007bff',
                        borderWidth: 1
                    }] : []
                },
                options: {
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Số lượng' } },
                        x: {
                            title: {
                                display: true,
                                text: isDateRange || (jobMonths[0]?.includes('/') && jobMonths[0]?.split('/').length === 3) ? 'Ngày' : 'Tháng/Năm'
                            }
                        }
                    },
                    plugins: { legend: { display: false } }
                }
            });

            // Calendar
            var calendarEl = document.getElementById('calendar');
            var initialView = 'dayGridMonth';
            var initialDate = null;

            // Adjust calendar view and date based on filter type
            if (data.filterType === 'day' && data.day) {
                initialView = 'timeGridDay';
                initialDate = data.day;
            } else if (data.filterType === 'month' && data.month) {
                initialView = 'dayGridMonth';
                initialDate = data.month + '-01'; // Navigate to first day of the month
            }

            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: initialView,
                initialDate: initialDate,
                locale: 'vi', // Sử dụng locale tiếng Việt
                buttonText: {
                    today: 'Hôm nay',
                    month: 'Tháng',
                    week: 'Tuần',
                    day: 'Ngày',
                    list: 'Danh sách'
                },
                dayHeaderFormat: { weekday: 'long' }, // Hiển thị tên ngày đầy đủ (Thứ Hai, Thứ Ba, ...)
                events: calendarJobs,
                eventBackgroundColor: function(event) {
                    switch (event.extendedProps.status) {
                        case 1: return '#28a745'; // Hoàn thành
                        case 2: return '#dc3545'; // Chưa hoàn thành
                        case 3: return '#ffc107'; // Hoàn thành muộn
                        case 4: return '#007bff'; // Đang xử lý
                        default: return '#6c757d';
                    }
                },
                eventBorderColor: function(event) { return event.backgroundColor; },
                height: 530,
                eventDidMount: function(info) { info.el.title = info.event.title; }
            });
            calendar.render();
        }

        $(document).ready(function () {
            // Function to show/hide filter fields and buttons based on filter type
            function toggleFilterFields(filterType) {
                // Hide all filter fields and buttons
                $('#dayFilter, #fromDateFilter, #toDateFilter, #monthFilter, #quarterFilter, #yearFilter, #buttonsContainer').hide();

                // Show relevant fields and buttons if a valid filter type is selected
                if (filterType) {
                    $('#buttonsContainer').show();
                    switch (filterType) {
                        case 'day':
                            $('#dayFilter').show();
                            break;
                        case 'dateRange':
                            $('#fromDateFilter, #toDateFilter').show();
                            break;
                        case 'month':
                            $('#monthFilter').show();
                            break;
                        case 'quarter':
                            $('#quarterFilter, #yearFilter').show();
                            break;
                        case 'year':
                            $('#yearFilter').show();
                            break;
                    }
                }
            }

            // Initialize dashboard with initial data
            initializeDashboard({
                labels: labels,
                sumVolume: sumVolume,
                sumProgress: sumProgress,
                sumQuality: sumQuality,
                sumSummary: sumSummary,
                jobMonths: jobMonths,
                jobCounts: jobCounts,
                jobStatusOntime: jobStatusOntime,
                jobStatusOverdue: jobStatusOverdue,
                jobStatusLate: jobStatusLate,
                jobStatusProcessing: jobStatusProcessing,
                calendarJobs: calendarJobs,
                isDateRange: isDateRange,
                totalJobs: @ViewBag.TotalJobs,
                completedJobs: @ViewBag.CompletedJobs,
                overdueJobs: @ViewBag.OverdueJobs,
                totalCategories: @ViewBag.TotalCategories,
                filterType: '@filterType',
                day: '@day',
                month: '@month',
                departmentId: departmentId
            });

            // Initialize filter fields visibility based on current filter type
            var currentFilterType = '@filterType';
            toggleFilterFields(currentFilterType);
            if (currentFilterType) {
                $('#filterType').val(currentFilterType);
            }

            // Handle filter type change
            $('#filterType').on('change', function () {
                var filterType = $(this).val();
                toggleFilterFields(filterType);
                // Do not trigger AJAX or reset form on filterType change
            });

            // Handle collapse toggle to show only filterType initially
            $('#collapseWidthExample').on('show.bs.collapse', function () {
                toggleFilterFields('');
                $('#filterTypeContainer').show();
                $('#filterType').val('');
            });

            // Handle form input changes with AJAX (exclude filterType)
            $('#day, #fromDate, #toDate, #month, #quarter, #year').on('change', function() {
                // Only trigger AJAX if a filter type is selected
                if (!$('#filterType').val()) {
                    return;
                }

                // Validate form inputs
                const day = $('#day').val();
                const DEPARTMENTID = $('#departmentId').val();
                const fromDate = $('#fromDate').val();
                const toDate = $('#toDate').val();
                const month = $('#month').val();
                const quarter = $('#quarter').val();
                const year = $('#year').val();

                // Check for conflicting filters
                const activeFilters = [day, fromDate, toDate, month, quarter].filter(val => val).length;
                if (activeFilters > 1 && !((fromDate && toDate) && activeFilters === 2)) {
                    alert('Vui lòng chỉ chọn một loại bộ lọc thời gian (Ngày, Khoảng thời gian, Tháng, hoặc Quý).');
                    return;
                }

                // Ensure toDate is not before fromDate
                if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {
                    alert('Ngày kết thúc phải sau ngày bắt đầu.');
                    return;
                }

                // Ensure year is selected when quarter is selected
                if (quarter && !year) {
                    alert('Vui lòng chọn năm khi chọn quý.');
                    return;
                }

                var formData = $('#filterForm').serialize() + '&departmentId=' + $('#departmentId').val();
                $.ajax({
                    url: '@Url.Action("Index")',
                    type: 'GET',
                    data: formData,
                    dataType: 'json',
                    success: function(response) {
                        // Update dashboard (charts and calendar)
                        response.filterType = $('#filterType').val();
                        response.day = $('#day').val();
                        response.month = $('#month').val();
                        response.departmentId = $('#departmentId').val();
                        initializeDashboard(response);

                        // Update export button href
                        $('.btn-export').attr('href', '@Url.Action("ExportToExcel")?' + formData);

                        // Update page title based on department selection
                        var deptName = response.departmentId ?
        @Html.Raw(Json.Serialize(ViewBag.Departments))
                                .find(d => d.Id == response.departmentId)?.Name || 'Unknown' :
                            'Tất cả phòng ban';
                        $('.content-header h1').text('Thống kê - ' + deptName);
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi lọc dữ liệu.');
                    }
                });
            });

            // Handle department filter change with AJAX
            $('#departmentId').on('change', function() {
                var formData = $('#filterForm').serialize() + '&departmentId=' + $(this).val();
                $.ajax({
                    url: '@Url.Action("Index")',
                    type: 'GET',
                    data: formData,
                    dataType: 'json',
                    success: function(response) {
                        // Update dashboard (charts and calendar)
                        response.filterType = $('#filterType').val();
                        response.day = $('#day').val();
                        response.month = $('#month').val();
                        response.departmentId = $('#departmentId').val();
                        initializeDashboard(response);

                        // Update export button href
                        $('.btn-export').attr('href', '@Url.Action("ExportToExcel")?' + formData);

                        // Update page title based on department selection
                        var deptName = response.departmentId ?
        @Html.Raw(Json.Serialize(ViewBag.Departments))
                                .find(d => d.Id == response.departmentId)?.Name || 'Unknown' :
                            'Tất cả phòng ban';
                        $('.content-header h1').text('Thống kê - ' + deptName);
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi lọc dữ liệu.');
                    }
                });
            });

            // Handle reset button
            $('#resetButton').on('click', function(e) {
                e.preventDefault();
                // Clear all form fields
                $('#filterForm')[0].reset();
                $('#departmentId').val('');
                // Hide all filter fields and buttons
                toggleFilterFields('');
                // Trigger AJAX to load default data
                $.ajax({
                    url: '@Url.Action("Index")',
                    type: 'GET',
                    data: { departmentId: '' }, // Include departmentId as empty
                    dataType: 'json',
                    success: function(response) {
                        // Update dashboard (charts and calendar)
                        response.filterType = '';
                        response.day = '';
                        response.month = '';
                        response.departmentId = '';
                        initializeDashboard(response);
                        // Update export button href to default
                        $('.btn-export').attr('href', '@Url.Action("ExportToExcel")');
                        // Reset page title
                        $('.content-header h1').text('Thống kê - Tất cả phòng ban');
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi đặt lại dữ liệu.');
                    }
                });
            });
        });
    </script>
}