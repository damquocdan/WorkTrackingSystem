@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<WorkTrackingSystem.Models.Employee>
@{
    ViewData["Title"] = "Quản lý nhân viên";
    Layout = "~/Areas/AdminSystem/Views/Shared/_Admin.cshtml";
}

<div class="row">
    <div class="col-md-12">
        <ol class="breadcrumb float-sm-end bg-light">
            <li class="breadcrumb-item">Admin</li>
            <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
        </ol>
    </div>
</div>
<div class="row">
    <div class="col-md-12" id="list-section">
        <div class="row mb-2">
            <div class="col-lg-9 col-md-9 col-sm-12">
                <div class="row">
                    <div class="col-md-5">
                        <div class="input-group">
                            <input type="text" class="form-control" id="searchInput" placeholder="Nhập tên / mã nhân viên" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" id="DepartmentId" name="DepartmentId" asp-items="ViewBag.Department">
                            <option value="" selected>Tất cả phòng ban</option>
                        </select>
                    </div>
                   @*  <div class="col-md-3">
                        <button type="button" class="btn btn-primary" onclick="filterEmployees()">Tìm kiếm & Lọc</button>
                    </div> *@
                </div>
            </div>
        </div>
        <table class="table table-bordered table-hover" id="employeeTable">
            <thead class="table-dark text-white text-center">
                <tr>
                    <th>Nhân viên</th>
                    <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Gender)</th>
                    <th class="birthday-column">@Html.DisplayNameFor(model => model.FirstOrDefault().Birthday)</th>
                    <th class="email-column">@Html.DisplayNameFor(model => model.FirstOrDefault().Email)</th>
                    <th>@Html.DisplayNameFor(model => model.FirstOrDefault().HireDate)</th>
                    <th class="address-column">@Html.DisplayNameFor(model => model.FirstOrDefault().Address)</th>
                    <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Avatar)</th>
                    <th class="position-column">Chức vụ</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-department-id="@item.DepartmentId">
                        <td class="employee-name">@Html.DisplayFor(modelItem => item.Code) - @(item.FirstName + " " + item.LastName)</td>
                        <td>
                            @switch (item.Gender)
                            {
                                case "Male":
                                    <span>Nam</span>
                                    break;
                                case "Female":
                                    <span>Nữ</span>
                                    break;
                                case "Other":
                                    <span>Khác</span>
                                    break;
                                default:
                                    <span>Không xác định</span>
                                    break;
                            }
                        </td>
                        <td class="birthday-column">@Html.DisplayFor(modelItem => item.Birthday)</td>
                        <td class="email-column">@Html.DisplayFor(modelItem => item.Email)</td>
                        <td>@Html.DisplayFor(modelItem => item.HireDate)</td>
                        <td class="address-column">@Html.DisplayFor(modelItem => item.Address)</td>
                        <td class="text-center">
                            @if (!string.IsNullOrEmpty(item.Avatar))
                            {
                                <img src="@item.Avatar" class="img-fluid rounded-circle" style="width: 50px; height: 50px; object-fit: cover;">
                            }
                        </td>
                        <td class="position-column">@Html.DisplayFor(modelItem => item.Position.Name)</td>
                        <td>
                            <a class="btn btn-primary btn-sm ajax-action" data-url="@Url.Action("Edit", new { id = item.Id })"><i class="bi bi-pencil-square"></i></a>
                            <a class="btn btn-info btn-sm ajax-action" data-url="@Url.Action("Details", new { id = item.Id })"><i class="bi bi-info-circle"></i></a>
                            <a class="btn btn-danger btn-sm ajax-action" data-url="@Url.Action("Delete", new { id = item.Id })"><i class="bi bi-trash"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-4 d-none" id="detail-section">
        <div class="actionCustomers"></div>
    </div>
</div>

@Html.PagedListPager(Model, page => Url.Action("Index", new { page = page, search = ViewBag.Search, DepartmentId = ViewBag.DepartmentId }), new PagedListRenderOptions
{
    LiElementClasses = new string[] { "page-item" },
    PageClasses = new string[] { "page-link" },
    DisplayLinkToFirstPage = PagedListDisplayMode.Always,
    DisplayLinkToLastPage = PagedListDisplayMode.Always,
    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
    DisplayLinkToNextPage = PagedListDisplayMode.Always,
    DisplayEllipsesWhenNotShowingAllPageNumbers = true,
    MaximumPageNumbersToDisplay = 5
})

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Xử lý sự kiện click cho các nút AJAX
        $(".ajax-action").click(function (e) {
            e.preventDefault();
            var url = $(this).data("url");

            if ($("#detail-section").hasClass("d-none")) {
                $("#list-section").removeClass("col-md-12").addClass("col-md-8");
                $("#detail-section").removeClass("d-none").addClass("col-md-4");
            }
            $(".email-column, .position-column, .address-column, .birthday-column").hide();

            $(".actionCustomers").load(url, function (response, status, xhr) {
                if (status === "error") {
                    alert("Lỗi khi tải dữ liệu: " + xhr.status + " " + xhr.statusText);
                }
            });
        });

        // Xử lý tìm kiếm khi người dùng nhập
        $("#searchInput").on("input", function () {
            filterEmployees();
        });

        // Xử lý lọc khi thay đổi phòng ban
        $("#DepartmentId").on("change", function () {
            filterEmployees();
        });
    });

    function filterEmployees() {
        var searchText = $("#searchInput").val().toLowerCase();
        var departmentId = $("#DepartmentId").val();
        
        $("#employeeTable tbody tr").each(function () {
            var row = $(this);
            var employeeName = row.find(".employee-name").text().toLowerCase();
            var rowDepartmentId = row.data("department-id");

            // Kiểm tra điều kiện tìm kiếm
            var matchesSearch = searchText === "" || employeeName.includes(searchText);

            // Kiểm tra điều kiện lọc phòng ban
            var matchesDepartment = departmentId === "" || rowDepartmentId == departmentId;

            // Hiển thị hoặc ẩn hàng
            if (matchesSearch && matchesDepartment) {
                row.show();
            } else {
                row.hide();
            }
        });
    }

    function closeDetailSection() {
        $("#list-section").removeClass("col-md-8").addClass("col-md-12");
        $("#detail-section").addClass("d-none");
        $(".email-column, .position-column, .address-column, .birthday-column").show();
    }
</script>