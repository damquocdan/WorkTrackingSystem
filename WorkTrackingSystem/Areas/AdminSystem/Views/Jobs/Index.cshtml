@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<WorkTrackingSystem.Models.Score>

@{
    ViewData["Title"] = "Quản lý công việc";
    Layout = "~/Areas/AdminSystem/Views/Shared/_Admin.cshtml";
}
<div class="row">
    <div class="col-md-12">
        <ol class="breadcrumb float-sm-end bg-light">
            <li class="breadcrumb-item">AdminSystem</li>
            <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
        </ol>
    </div>
</div>
<p>
    <a id="btn-create-job" class="btn btn-primary" data-bs-toggle="collapse" href="#collapsejob" role="button" aria-expanded="false" aria-controls="collapsejob"><i class="bi bi-plus-circle"></i> Giao C.việc</a>
    <a class="btn btn-success ajax-action-create" data-bs-toggle="collapse" href="#collapsecreate" role="button" aria-expanded="false" aria-controls="collapsecreate" data-url="@Url.Action("Createjob")">Tạo công việc</a>
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
        Lọc
    </button>
</p>
<div class="collapse" id="collapseExample">
    <div class="card card-body">
        <div class="row">
            <div class="col-md-12">
                <div class="p-3 mb-3">
                    <div id="searchForm" class="row gx-2 gy-2 align-items-end">
                        <!-- Tìm kiếm -->
                        <div class="col-md-4">
                            <label class="form-label fw-bold">Tìm kiếm</label>
                            <input type="text" id="searchText" name="searchText" class="form-control" placeholder="Nhập mã / tên nhân viên / công việc" value="@ViewBag.SearchText">
                        </div>

                        <!-- Tháng -->
                      @*   <div class="col-md-2">
                            <label class="form-label fw-bold">Tháng</label>
                            <input type="month" id="month" name="month" class="form-control" value="@ViewBag.Month" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-bold">Ngày</label>
                            <input type="date" id="day" name="day" class="form-control" value="@ViewBag.Day" />
                        </div> *@
                        <div class="col-md-1">
                            <label class="form-label fw-bold">Lọc theo</label>
                            <select id="filterType" name="filterType" class="form-select">
                                <option value="">-- Chọn kiểu lọc --</option>
                                <option value="month">Tháng</option>
                                <option value="day">Ngày</option>
                            </select>
                        </div>

                        <div class="col-md-2 mt-2" id="monthFilter" style="display: none;">
                            <label class="form-label fw-bold">Chọn tháng</label>
                            <input type="month" id="month" name="month" class="form-control" value="@ViewBag.Month" />
                        </div>

                        <div class="col-md-2 mt-2" id="dayFilter" style="display: none;">
                            <label class="form-label fw-bold">Chọn ngày</label>
                            <input type="date" id="day" name="day" class="form-control" value="@ViewBag.Day" />
                        </div>
                        <!-- Trạng thái -->
                        <div class="col-md-2">
                            <label class="form-label fw-bold">Trạng thái</label>
                            <select id="status" name="status" class="form-select">
                                <option value="">-- Tất cả --</option>
                                <option value="1">Hoàn thành</option>
                                <option value="2">Chưa hoàn thành</option>
                                <option value="3">Hoàn thành muộn</option>
                                <option value="4">Đang xử lý</option>
                                <option value="0">Chưa bắt đầu</option>
                            </select>
                        </div>

                        <!-- Danh mục -->
                        <div class="col-md-2">
                            <label class="form-label fw-bold">Danh mục</label>
                            <select id="categoryId" name="categoryId" class="form-select">
                                <option value="">-- Chọn danh mục --</option>
                                @foreach (var category in ViewData["Categories"] as List<WorkTrackingSystem.Models.Category>)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </div>

                        <!-- Sắp xếp -->
                        <div class="col-md-2">
                            <label class="form-label fw-bold">Sắp xếp</label>
                            <select id="sortOrder" name="sortOrder" class="form-select">
                                <option value="">-- Mặc định --</option>
                                <option value="due_asc">Hạn hoàn thành tăng dần</option>
                                <option value="due_desc">Hạn hoàn thành giảm dần</option>
                                <option value="review_asc">Đánh giá tăng dần</option>
                                <option value="review_desc">Đánh giá giảm dần</option>
                            </select>
                        </div>

                        <!-- Chưa đánh giá -->
                        <div class="col-md-2">
                            <div class="form-check mt-4">
                                <input class="form-check-input" type="checkbox" id="showCompletedZeroReview" name="showCompletedZeroReview" value="true" @(ViewBag.ShowCompletedZeroReview ? "checked" : "")>
                                <label class="form-check-label" for="showCompletedZeroReview">Chưa đánh giá</label>
                            </div>
                        </div>

                        <!-- Hạn hôm nay -->
                        <div class="col-md-2">
                            <div class="form-check mt-4">
                                <input class="form-check-input" type="checkbox" id="dueToday" name="dueToday" value="true" @(ViewBag.DueToday ? "checked" : "")>
                                <label class="form-check-label" for="dueToday">Công việc theo ngày</label>
                            </div>
                        </div>

                        <!-- Nút Tìm kiếm & Reset -->
                        <div class="col-md-4 d-flex justify-content-end mt-4">
                            @* <button type="button" id="searchButton" class="btn btn-primary me-2">
                                <i class="bi bi-search"></i> Tìm kiếm
                            </button> *@
                           @*  <a href="@Url.Action("Index")" id="resetButton" class="btn btn-secondary">
                                <i class="bi bi-arrow-repeat"></i> Reset
                            </a> *@
                            <a href="#" id="resetButton" class="btn btn-secondary">
                                <i class="bi bi-arrow-repeat"></i> Reset
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="collapse" id="collapsejob">
    <div class="card card-body">
<div id="search-employee-section" class="d-none ">
    <input type="text" id="employee-search" class="form-control" placeholder="Tìm kiếm nhân viên...">
    <div id="employee-suggestions" class="d-flex flex-wrap mt-2"></div>
</div>
</div>


<div id="selected-employee" class="d-none mt-3 selected-employee-container">
    <div class="card p-3 d-flex flex-row align-items-center">
        <img id="selected-avatar" src="" class="rounded-circle" width="50" height="50" />
        <h5 id="selected-name" class="ms-3 mb-0"></h5>
        <button id="clear-selection" class="btn btn-danger btn-sm ms-auto">Xóa</button>
    </div>
</div>

<div id="job-lists" class="mt-3 d-none">
    <h4 class="text-center">Công việc chưa được giao</h4>
    <div class="table-responsive">
        <table class="table table-bordered text-left table-hover" id="unassigned-jobs-table">
            <thead class="text-center">
                <tr>
                    <th><i class="bi bi-tag"></i> Danh mục</th>
                    <th><i class="bi bi-card-heading"></i> Tên công việc</th>
                    <th><i class="bi bi-clock"></i> Ngày bắt đầu</th>
                    <th><i class="bi bi-clock"></i> Hạn chót</th>
                    <th>Trạng thái</th>
                    <th>Giao việc</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <br />
    <h4 class="text-center">Công việc của nhân viên</h4>
    <div class="table-responsive">
        <table class="table table-bordered" id="assigned-jobs-table">
            <thead class="bg-primary">
                <tr>
                    <th><i class="bi bi-tag"></i> Danh mục</th>
                    <th><i class="bi bi-card-heading"></i> Tên công việc</th>
                    <th><i class="bi bi-clock"></i> Ngày bắt đầu</th>
                    <th><i class="bi bi-clock"></i> Hạn chót</th>
                    <th>Trạng thái</th>
                    <th><i class="bi bi-clock"></i> Ngày hoàn thành</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>
</div>
<div class="actionCreate collapse" id="collapsecreate"></div>
<form id="assign-job-form" action="@Url.Action("AssignEmployee", "Jobs")" method="post" style="display: none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="jobId" id="form-job-id" />
    <input type="hidden" name="employeeId" id="form-employee-id" />
</form>
<div class="row">
    <div class="col-md-12" id="list-section">
        <div class="card-body">
            <div class="table-responsive">
                <h2 class="text-center">DANH SÁCH CÔNG VIỆC</h2>
                <table class="table table-bordered text-left table-hover" id="scoreTable">
                    <thead class="text-center">
                        <tr>
                            <th>STT</th>
                            <th>Người triển khai</th>
                            <th>Hạng mục</th>
                            <th>Công việc</th>
                            <th>Deadline</th>
                            <th>Ngày hoàn thành thực tế</th>
                            <th>Trạng thái</th>
                           
                            <th>Tổng hợp đánh giá</th>
                            <th width="100px">
                               
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int index = (Model.PageNumber - 1) * Model.PageSize;
                        }
                        @foreach (var item in Model)
                        {
                            index++;
                            <tr class="text-center
                                @(item.Status == 1 ? "table-success" :
                                item.Status == 2 ? "table-warning" :
                                item.Status == 3 ? "table-danger" :
                                item.Status == 4 ? "table-primary" :
                                item.Status == 0 ? "table-secondary" : "")">
                                <td>@index</td>
                                <td>
                                    @if (item.JobMapEmployee?.Employee != null)
                                    {
                                        @item.JobMapEmployee.Employee.FirstName @item.JobMapEmployee.Employee.LastName
                                    }
                                    else
                                    {
                                        <span class="text-danger">Chưa giao việc</span>
                                    }
                                </td>
                                <td>@item.JobMapEmployee.Job.Category.Name</td>
                                <td>@item.JobMapEmployee.Job.Name</td>
                                <td>
                                    @{
                                        var createDate = item.CreateDate?.Date;
                                        var deadline1 = item.JobMapEmployee?.Job?.Deadline1;
                                        var deadline2 = item.JobMapEmployee?.Job?.Deadline2;
                                        var deadline3 = item.JobMapEmployee?.Job?.Deadline3;
                                    }

                                    @if (item.JobMapEmployee?.Employee != null
                                   && ((createDate.HasValue && deadline1.HasValue && DateOnly.FromDateTime(createDate.Value) == deadline1.Value)
                                   || (createDate.HasValue && deadline2.HasValue && DateOnly.FromDateTime(createDate.Value) == deadline2.Value)
                                   || (createDate.HasValue && deadline3.HasValue && DateOnly.FromDateTime(createDate.Value) == deadline3.Value)))
                                    {
                                        @Html.DisplayFor(modelItem => item.CreateDate)
                                    }
                                    else
                                    {
                                        <span class=""></span>
                                    }
                                </td>
                                <td>@Html.DisplayFor(modelItem => item.CompletionDate)</td>
                                <td>
                                    <span class="badge
                                        @(item.Status == 1 ? "bg-success" :
                                        item.Status == 2 ? "bg-warning" :
                                        item.Status == 3 ? "bg-danger" :
                                        item.Status == 4 ? "bg-primary" :
                                        "bg-secondary")" style="padding:10px;">
                                        @switch (item.Status)
                                        {
                                            case 1:
                                                @("Hoàn thành")
                                                ; break;
                                            case 2:
                                                @("Chưa hoàn thành")
                                                ; break;
                                            case 3:
                                                @("Hoàn thành muộn")
                                                ; break;
                                            case 4:
                                                @("Đang xử lý")
                                                ; break;
                                            case 0:
                                                @("Chưa bắt đầu")
                                                ; break;
                                            default:
                                                @("Chưa bắt đầu")
                                                ; break;
                                        }
                                    </span>
                                </td>
                                @*  <td>
                            @if (item.JobMapEmployee?.Employee != null && (item.IsActive ?? false))
                            {
                            <input type="number" class="form-control assessment-input"
                            data-field="VolumeAssessment"
                            data-id="@item.Id"
                            value="@(item.VolumeAssessment?.ToString("F2") ?? "0.00")"
                            min="0" max="3" step="0.5" />
                            }
                            </td>
                            <td>
                            @if (item.JobMapEmployee?.Employee != null && (item.IsActive ?? false))
                            {
                            <input type="number" class="form-control assessment-input"
                            data-field="ProgressAssessment"
                            data-id="@item.Id"
                            value="@(item.ProgressAssessment?.ToString("F2") ?? "0.00")"
                            min="0" max="3" step="0.5" />
                            }
                            </td>
                            <td>
                            @if (item.JobMapEmployee?.Employee != null && (item.IsActive ?? false))
                            {
                            <input type="number" class="form-control assessment-input"
                            data-field="QualityAssessment"
                            data-id="@item.Id"
                            value="@(item.QualityAssessment?.ToString("F2") ?? "0.00")"
                            min="0" max="3" step="0.5" />
                            }
                            </td> *@
                                <td>
                                    @if (item.JobMapEmployee?.Employee != null)
                                    {
                                        <span class="summary-display" data-id="@item.Id">
                                            @(item.SummaryOfReviews?.ToString("F2") ?? "N/A")
                                        </span>
                                    }
                                </td>
                                <td>
                                    <div class="d-flex gap-2">
                                        @if (item.JobMapEmployee?.Employee != null && (item.IsActive ?? false))
                                        {
                                            <a class="btn btn-primary btn-sm ajax-action" data-url="@Url.Action("Create", new { currentJobMapEmployeeId = item.JobMapEmployee.Id })" title="Giao cho người khác">
                                                <i class="fas fa-people-arrows"></i>
                                            </a>
                                        }
                                        <a class="btn-yellow btn-event ajax-action" data-url="@Url.Action("Edit", new { id = item.Id })"><i class="bi bi-pencil-square"></i></a>
                                        <a class="btn-green btn-event ajax-action" data-url="@Url.Action("Details", new { id = item.Id })" title="Chi tiết">
                                            <i class="fas fa-info-circle"></i>
                                        </a>
                                        <a class="btn-red btn-event ajax-action" data-url="@Url.Action("Delete", new { id = item.Id })" title="Xoá">
                                            <i class="fas fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                                
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="pagination">
                
                @if (Model.TotalItemCount > Model.PageSize)
                {
                    @Html.PagedListPager(Model, page => Url.Action("Index", new
                        {
                            page,
                        searchText = ViewBag.SearchText,
                        month = ViewBag.Month,
                        status = ViewBag.Status,
                        categoryId = ViewBag.CategoryId,
                        sortOrder = ViewBag.SortOrder,
                        showCompletedZeroReview = ViewBag.ShowCompletedZeroReview,
                        dueToday = ViewBag.DueToday
                    }), new PagedListRenderOptions
           {
               LiElementClasses = new string[] { "page-item" },
               PageClasses = new string[] { "page-link" },
               DisplayLinkToFirstPage = PagedListDisplayMode.Always,
               DisplayLinkToLastPage = PagedListDisplayMode.Always,
               DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
               DisplayLinkToNextPage = PagedListDisplayMode.Always,
               DisplayEllipsesWhenNotShowingAllPageNumbers = true,
               MaximumPageNumbersToDisplay = 5
           })
                }
            </div>
        </div>
    </div>
    <div class="col-md-4 d-none" id="detail-section">
        <div class="actionCustomers"></div>
    </div>
</div>
@* <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"> *@
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
@* <link href="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
 *@
@section Scripts {
    <script>
        $(document).ready(function () {


            const filterType = document.getElementById("filterType");
            const monthFilter = document.getElementById("monthFilter");
            const dayFilter = document.getElementById("dayFilter");

            filterType.addEventListener("change", function () {
                const value = this.value;
                if (value === "month") {
                    monthFilter.style.display = "block";
                    dayFilter.style.display = "none";
                } else if (value === "day") {
                    dayFilter.style.display = "block";
                    monthFilter.style.display = "none";
                } else {
                    monthFilter.style.display = "none";
                    dayFilter.style.display = "none";
                }
            });

            // Nếu đã có dữ liệu sẵn thì hiển thị đúng input tương ứng
            const currentMonth = "@ViewBag.Month";
            const currentDay = "@ViewBag.Day";
            if (currentMonth) {
                filterType.value = "month";
                monthFilter.style.display = "block";
            } else if (currentDay) {
                filterType.value = "day";
                dayFilter.style.display = "block";
            }

            // Xử lý tìm kiếm và lọc
            $("#searchText, #month,#day, #status, #categoryId, #sortOrder, #showCompletedZeroReview, #dueToday").on("input change", function () {
                applyFilters();
            });

            // Xử lý nút tìm kiếm
            $("#searchButton").on("click", function () {
                applyFilters();
            });

            // Xử lý phân trang
            $(document).on("click", ".page-link", function (e) {
                e.preventDefault();
                var url = $(this).attr("href");
                loadTable(url);
            });

            // Xử lý nút xuất Excel
            $(document).on("click", "#exportExcel", function (e) {
                e.preventDefault();
                var searchText = $("#searchText").val();
                var month = $("#month").val();
                var day = $("#day").val();
                var status = $("#status").val();
                var categoryId = $("#categoryId").val();
                var sortOrder = $("#sortOrder").val();
                var showCompletedZeroReview = $("#showCompletedZeroReview").is(":checked");
                var dueToday = $("#dueToday").is(":checked");
                var url = "@Url.Action("ExportToExcel")" + "?searchText=" + encodeURIComponent(searchText) +
                    "&month=" + encodeURIComponent(month) +
                    "&day=" + encodeURIComponent(day) +
                    "&status=" + encodeURIComponent(status) +
                    "&categoryId=" + encodeURIComponent(categoryId) +
                    "&sortOrder=" + encodeURIComponent(sortOrder) +
                    "&showCompletedZeroReview=" + encodeURIComponent(showCompletedZeroReview) +
                    "&dueToday=" + encodeURIComponent(dueToday);
                window.location.href = url;
            });

            // Xử lý sự kiện AJAX cho nút chi tiết
            $(document).on("click", ".ajax-action", function (e) {
                e.preventDefault();
                var url = $(this).data("url");
                if ($("#detail-section").hasClass("d-none")) {
                    $("#list-section").removeClass("col-md-12").addClass("col-md-8");
                    $("#detail-section").removeClass("d-none").addClass("col-md-4");
                }
                $(".actionCustomers").load(url, function (response, status, xhr) {
                    if (status === "error") {
                        alert("Lỗi khi tải dữ liệu: " + xhr.status + " " + xhr.statusText);
                    }
                });
            });
            $(document).on("click", ".ajax-action-create", function (e) {
                e.preventDefault();
                var url = $(this).data("url");
                if ($("#detail-section").hasClass("d-none")) {
                    
                   
                }
                $(".actionCreate").load(url, function (response, status, xhr) {
                    if (status === "error") {
                        alert("Lỗi khi tải dữ liệu: " + xhr.status + " " + xhr.statusText);
                    }
                });
            });
            // Xử lý cập nhật đánh giá
            $(document).on('change keydown', '.assessment-input', function (e) {
                if (e.type === 'keydown' && e.key !== 'Tab') return; // Only proceed on Tab or change

                var $input = $(this);
                var id = $input.data('id');
                var field = $input.data('field');
                var value = parseFloat($input.val());

                // Validate input
                if (isNaN(value) || value < 0 || value > 3) {
                    $input.val(value < 0 ? '0.00' : '3.00');
                    value = value < 0 ? 0 : 3;
                }

                // AJAX call to update the field
                $.ajax({
                    url: '@Url.Action("UpdateAssessment", "Jobs", new { area = "AdminSystem" })',
                    type: 'POST',
                    data: {
                        id: id,
                        field: field,
                        value: value,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            // Update SummaryOfReviews
                            updateSummary(id);
                        } else {
                            alert('Cập nhật thất bại: ' + response.message);
                        }
                    },
                    error: function () {
                        alert('Lỗi khi gửi yêu cầu.');
                    }
                });

                // Move to next input on Tab
                if (e.key === 'Tab') {
                    e.preventDefault();
                    var $nextInput = $input.closest('tr').find('.assessment-input').eq($input.index('.assessment-input') + 1);
                    if ($nextInput.length) {
                        $nextInput.focus();
                    }
                }
            });

            // Function to calculate and update SummaryOfReviews
            function updateSummary(id) {
                var $row = $('tr').find(`[data-id="${id}"]`).closest('tr');
                var volume = parseFloat($row.find('[data-field="VolumeAssessment"]').val()) || 0;
                var progress = parseFloat($row.find('[data-field="ProgressAssessment"]').val()) || 0;
                var quality = parseFloat($row.find('[data-field="QualityAssessment"]').val()) || 0;

                // Calculate SummaryOfReviews: Volume*60% + Progress*15% + Quality*20%
                var summary = (volume * 0.6) + (progress * 0.15) + (quality * 0.2);
                $row.find('.summary-display').text(summary.toFixed(2));
            }

            // Hiển thị ô tìm kiếm khi bấm "Giao C.việc"
            $("#btn-create-job").click(function () {
                $("#search-employee-section").removeClass("d-none");
                if (sessionStorage.getItem('selectedEmployee')) {
                    $("#selected-employee").removeClass("d-none");
                }
            });

            //nút reset
            $(document).on("click", "#resetButton", function (e) {
                e.preventDefault();
                // Reset tất cả các giá trị trong form về mặc định
                $("#searchForm").find("input[type=text], input[type=month], select").val('');
                $("#searchForm").find("input[type=checkbox]").prop("checked", false);
                // Xóa các tham số trên URL
               let url = "@Url.Action("Index", "Jobs", new { area = "AdminSystem" })";
                   loadTable(url);
                url.search = ''; // Xóa toàn bộ query params
                // Gửi AJAX để tải lại danh sách công việc
                loadJobs(url.toString());
            });
            // Autocomplete tìm kiếm nhân viên
            var employees = [
        @if (ViewBag.EmployeeList != null)
        {
            foreach (var employee in (IEnumerable<dynamic>)ViewBag.EmployeeList)
            {
                @Html.Raw($"{{ id: '{employee.Value}', name: '{employee.Text}', avatar: '{employee.Avatar}' }},")
            }
        }
                    ];

            $("#employee-search").autocomplete({
                source: function (request, response) {
                    var results = $.map(employees, function (employee) {
                        if (employee.name.toLowerCase().includes(request.term.toLowerCase())) {
                            return employee;
                        }
                    });
                    response(results);
                },
                select: function (event, ui) {
                    $("#employee-search").val('');
                    showSelectedEmployee(ui.item);
                    return false;
                },
                open: function () {
                    var $menu = $(this).data("ui-autocomplete").menu.element;
                    $menu.css({
                        "display": "flex",
                        "flex-direction": "row",
                        "flex-wrap": "wrap",
                        "overflow-x": "auto",
                        "white-space": "nowrap"
                    });
                }
            }).autocomplete("instance")._renderItem = function (ul, item) {
                return $("<li>")
                    .append(`
                                <div class="card mb-2" style="width: 200px; text-align: center;">
                                    <div class="card-body d-flex flex-column align-items-center">
                                        <img src="${item.avatar}" class="mb-2" style="width: 100px; height: 100px; border-radius: 50%;">
                                        <p class="mt-2">${item.name}</p>
                                    </div>
                                </div>
                            `)
                    .appendTo(ul);
            };

            // Hiển thị nhân viên đã chọn và lấy danh sách công việc
            function showSelectedEmployee(employee) {
                $("#selected-employee").removeClass("d-none");
                $("#selected-avatar").attr("src", employee.avatar);
                $("#selected-name").text(employee.name);
                $("#search-employee-section").addClass("d-none");
                $("#selected-employee").data("employee-id", employee.id);
                sessionStorage.setItem('selectedEmployee', JSON.stringify({
                    id: employee.id,
                    name: employee.name,
                    avatar: employee.avatar
                }));
                fetchJobs(employee.id);
            }

            // Lấy danh sách công việc qua AJAX
            function fetchJobs(employeeId) {
                $.ajax({
                    url: '@Url.Action("GetJobsByEmployee", "Jobs")',
                    type: 'GET',
                    data: { employeeId: employeeId },
                    success: function (result) {
                        if (result.success) {
                            displayJobs(result.unassignedJobs, result.assignedJobs);
                            $("#job-lists").removeClass("d-none");
                        } else {
                            alert("Lỗi: " + result.message);
                            $("#job-lists").addClass("d-none");
                        }
                    },
                    error: function (xhr) {
                        alert("Lỗi khi tải danh sách công việc: " + xhr.responseText);
                        $("#job-lists").addClass("d-none");
                    }
                });
            }

            // Hiển thị danh sách công việc
            function displayJobs(unassignedJobs, assignedJobs) {
                var unassignedTableBody = $("#unassigned-jobs-table tbody");
                var assignedTableBody = $("#assigned-jobs-table tbody");

                unassignedTableBody.empty();
                assignedTableBody.empty();

                unassignedJobs.forEach(function (job) {
                    var statusText = getStatusText(job.status);
                    var rowClass = getStatusClass(job.status);
                    unassignedTableBody.append(`
                                <tr class="${rowClass}" data-job-id="${job.id}">
                                    <td>${job.categoryName || 'N/A'}</td>
                                    <td>${job.name || 'N/A'}</td>
                                    <td><input type="text" class="datepicker-time form-control" value="${formatDate(job.time)}" /></td>
                                    <td><input type="text" class="datepicker-deadline form-control" value="${formatDate(job.deadline1)}" /></td>
                                    <td><span class="text-bold">${statusText}</span></td>
                                    <td>
                                        <input type="checkbox" class="assign-job-checkbox" data-job-id="${job.id}" />
                                    </td>
                                </tr>
                            `);
                });

                assignedJobs.forEach(function (job) {
                    var statusText = getStatusText(job.status);
                    var rowClass = getStatusClass(job.status);
                    assignedTableBody.append(`
                                <tr class="${rowClass}" data-job-id="${job.id}">
                                    <td>${job.categoryName || 'N/A'}</td>
                                    <td>${job.name || 'N/A'}</td>
                                    <td>${formatDate(job.time)}</td>
                                    <td>${formatDate(job.deadline1)}</td>
                                    <td><span class="text-bold">${statusText}</span></td>
                                    <td>${formatDate(job.completionDate)}</td>
                                </tr>
                            `);
                });

                // Khởi tạo lại datepicker sau khi thêm các phần tử mới
                $(".datepicker-time").datepicker({
                    dateFormat: 'dd/mm/yy',
                    changeMonth: true,
                    changeYear: true
                });
                $(".datepicker-deadline").datepicker({
                    dateFormat: 'dd/mm/yy',
                    changeMonth: true,
                    changeYear: true
                });

                bindCheckboxEvents();
                bindAjaxActions();
            }

            // Lấy văn bản trạng thái
            function getStatusText(status) {
                switch (status) {
                    case 1: return "Hoàn thành";
                    case 2: return "Chưa hoàn thành";
                    case 3: return "Hoàn thành muộn";
                    case 4: return "Đang xử lý";
                    case 0: return "Chưa bắt đầu";
                    default: return "Chưa đánh giá";
                }
            }

            // Lấy class trạng thái
            function getStatusClass(status) {
                switch (status) {
                    case 1: return "table-success";
                    case 2: return "table-warning";
                    case 3: return "table-danger";
                    case 4: return "table-primary";
                    case 0: return "table-secondary";
                    default: return "";
                }
            }

            // Gắn sự kiện checkbox
            function bindCheckboxEvents() {
                $(".assign-job-checkbox").off("change").on("change", function () {
                    var checkbox = $(this);
                    var jobId = checkbox.data("job-id");
                    var employeeId = $("#selected-employee").data("employee-id");
                    var time = checkbox.closest("tr").find(".datepicker-time").val();
                    var deadline = checkbox.closest("tr").find(".datepicker-deadline").val();

                    if (checkbox.is(":checked")) {
                        if (!employeeId) {

                            Swal.fire({
                                icon: "error",
                                title: "Vui lòng chọn nhân viên trước!",
                                showConfirmButton: false,
                                timer: 1500
                            });
                            checkbox.prop("checked", false);
                            return;
                        }

                        $("#form-job-id").val(jobId);
                        $("#form-employee-id").val(employeeId);

                        // Gửi AJAX request để giao việc kèm ngày tháng
                        $.ajax({
                            url: $("#assign-job-form").attr("action"),
                            type: "POST",
                            data: {
                                jobId: jobId,
                                employeeId: employeeId,
                                time: time,
                                deadline: deadline,
                                "__RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function (result) {
                                if (result.success) {
                                    Swal.fire({
                                        icon: "success",
                                        title: "Đã giao công việc thành công!",
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    fetchJobs(employeeId);
                                } else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Lỗi: " + result.message,
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    checkbox.prop("checked", false);
                                }
                            },
                            error: function (xhr) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Lỗi khi gán công việc",
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                                checkbox.prop("checked", false);
                            }
                        });
                    }
                });
            }

            // Gắn sự kiện giao việc trực tiếp từ bảng chính
            $(".assign-job-btn").click(function () {
                var jobId = $(this).data("job-id");
                $("#search-employee-section").removeClass("d-none");
                $("#form-job-id").val(jobId);
            });

            // Gắn sự kiện AJAX
            function bindAjaxActions() {
                $(".ajax-action").off("click").on("click", function (e) {
                    e.preventDefault();
                    var url = $(this).data("url");
                    if ($("#detail-section").hasClass("d-none")) {
                        $("#list-section").removeClass("col-md-12").addClass("col-md-8");
                        $("#detail-section").removeClass("d-none").addClass("col-md-4");
                    }
                    $(".actionCustomers").load(url, function (response, status, xhr) {
                        if (status === "error") {
                            Swal.fire({
                                icon: "error",
                                title: "Lỗi khi tải dữ liệu",
                                showConfirmButton: false,
                                timer: 1500
                            });
                        }
                    });
                });
            }

            // Xóa nhân viên đã chọn
            $("#clear-selection").click(function () {
                $("#selected-employee").addClass("d-none");
                $("#search-employee-section").removeClass("d-none");
                $("#selected-employee").removeData("employee-id");
                sessionStorage.removeItem('selectedEmployee');
                $("#job-lists").addClass("d-none");

                // Tải lại trang
                location.reload();
            });

            // Load nhân viên từ sessionStorage
            var previouslySelected = sessionStorage.getItem('selectedEmployee');
            if (previouslySelected) {
                var employee = JSON.parse(previouslySelected);
                showSelectedEmployee(employee);
            }
        });

        function applyFilters() {
            var searchText = $("#searchText").val();
            var month = $("#month").val();
            var day = $("#day").val();
            var status = $("#status").val();
            var categoryId = $("#categoryId").val();
            var sortOrder = $("#sortOrder").val();
            var showCompletedZeroReview = $("#showCompletedZeroReview").is(":checked");
            var dueToday = $("#dueToday").is(":checked");
            var url = "@Url.Action("Index")" + "?searchText=" + encodeURIComponent(searchText) +
                "&month=" + encodeURIComponent(month) +
                "&day=" + encodeURIComponent(day) +
                "&status=" + encodeURIComponent(status) +
                "&categoryId=" + encodeURIComponent(categoryId) +
                "&sortOrder=" + encodeURIComponent(sortOrder) +
                "&showCompletedZeroReview=" + encodeURIComponent(showCompletedZeroReview) +
                "&dueToday=" + encodeURIComponent(dueToday);
            loadTable(url);
        }

        function loadTable(url) {
            $.ajax({
                url: url,
                type: "GET",
                beforeSend: function () {
                    $("#scoreTable tbody").html('<tr><td colspan="12" class="text-center">Đang tải...</td></tr>');
                },
                success: function (data) {
                    var newTableBody = $(data).find("#scoreTable tbody").html();
                    $("#scoreTable tbody").html(newTableBody);
                    var newPagination = $(data).find(".pagination").html();
                    $(".pagination").html(newPagination);
                },
                error: function (xhr, status, error) {
                    console.error("Lỗi tải dữ liệu:", status, error);
                    $("#scoreTable tbody").html('<tr><td colspan="12" class="text-center text-danger">Lỗi khi tải dữ liệu.</td></tr>');
                }
            });
        }

        function closeDetailSection() {
            $("#list-section").removeClass("col-md-8").addClass("col-md-12");
            $("#detail-section").addClass("d-none");
            $(".actionCustomers").empty();
        }

        function formatDate(date) {
            if (!date) return '';
            const d = new Date(date);
            const day = String(d.getDate()).padStart(2, '0');
            const month = String(d.getMonth() + 1).padStart(2, '0'); // Tháng bắt đầu từ 0
            const year = d.getFullYear();
            return `${day}/${month}/${year}`;
        }
    </script>
}
