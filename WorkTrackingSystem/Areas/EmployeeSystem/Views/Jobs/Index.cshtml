@using WorkTrackingSystem.Areas.EmployeeSystem.Models
@using X.PagedList.Mvc.Core
@* @model X.PagedList.IPagedList<WorkTrackingSystem.Models.Score> *@
	@model X.PagedList.IPagedList<WorkTrackingSystem.Areas.EmployeeSystem.Models.JobViewModel>
@{
	ViewData["Title"] = "Danh sách công việc";
	Layout = "~/Areas/EmployeeSystem/Views/Shared/_Employee.cshtml";
	var areaName = ViewContext.RouteData.Values["area"]?.ToString();
}

<!-- Content Header (Page header) -->
<div class="content-header">
	<div class="container-fluid">
		<div class="row ">
			<div class="col-sm-6">
				<h5 class="m-0">@ViewData["Title"]</h5>
			</div>
			<div class="col-sm-6">
				<ol class="breadcrumb float-sm-right">
					<li class="breadcrumb-item"><a href="@Url.Action("Index", "Dashboard", new { area = areaName })">@areaName</a></li>
					<li class="breadcrumb-item active">@ViewData["Title"]</li>
				</ol>
			</div>
		</div>
	</div>
</div>
<p>
	<button class="btn btn-primary " type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample" title="Bộ lọc">
		Tìm kiếm
	</button>
</p>
<div class="collapse show" id="collapseExample">
	<div class="card card-body">
		<div class=" ">
			<form asp-controller="Jobs" asp-action="Index" method="get">
				<div class="row gx-2 gy-2 align-items-end">
					<!-- Ô tìm kiếm -->
					<div class="col-md-4">
						<label class="form-label fw-bold">Tìm kiếm</label>
						<div class="input-group">
							<input type="text" class="form-control" name="search" placeholder="Nhập tên công việc / Code" value="@Context.Request.Query["search"]">
						</div>
					</div>

					<!-- Lọc theo Deadline -->
					<div class="col-md-4">
						<label class="form-label fw-bold">Deadline</label>
						<div class="input-group">
							<input type="date" name="deadlineStartDate" class="form-control" value="@ViewBag.DeadlineStartDate">
							<span class="input-group-text">→</span>
							<input type="date" name="deadlineEndDate" class="form-control" value="@ViewBag.DeadlineEndDate">
						</div>
					</div>

					<!-- Lọc theo Ngày hoàn thành -->
					<div class="col-md-4">
						<label class="form-label fw-bold">Hoàn thành</label>
						<div class="input-group">
							<input type="date" name="startDate" class="form-control" value="@ViewBag.StartDate">
							<span class="input-group-text">→</span>
							<input type="date" name="endDate" class="form-control" value="@ViewBag.EndDate">
						</div>
					</div>

					<!-- Lọc theo Tháng -->
					<div class="col-md-3">
						<label class="form-label fw-bold">Deadline tháng</label>
						<input type="month" name="selectedMonth" class="form-control" value="@ViewBag.SelectedMonth">
					</div>

					<!-- Lọc theo Trạng thái -->
					<div class="col-md-3">
						<label class="form-label fw-bold">Trạng thái</label>
						<select id="filterStatus" class="form-select">
							<option value="">Tất cả trạng thái</option>
							<option value="1">Hoàn thành</option>
							<option value="2">Chưa hoàn thành</option>
							<option value="3">Hoàn thành muộn</option>
							<option value="4">Đang xử lý</option>
							<option value="0">Chưa bắt đầu</option>
						</select>
					</div>

					<!-- Nút Lọc & Reset -->
					<div class="col-md-2 d-flex justify-content-end mt-4">
						<a href="#" id="resetButton" class="btn btn-secondary me-2">
							<i class="bi bi-arrow-repeat"></i>
						</a>
						<button class="btn btn-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
							<i class="fa-solid fa-chevron-up"></i>
						</button>
					</div>
				</div>
			</form>
		</div>

	</div>
</div>

<div id="jobListContainer">
	@await Html.PartialAsync("_JobListPartial", Model)
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

@section Scripts {
	<script>

		$(document).ready(function () {
			// Hàm tải danh sách công việc qua AJAX
			function loadJobs(url) {
				$.ajax({
					url: url,
					type: "GET",
					beforeSend: function () {
						$("#jobListContainer").html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>');
					},
					success: function (data) {
						$("#jobListContainer").html(data);
					},
					error: function () {
						alert("Đã xảy ra lỗi khi tải dữ liệu.");
					}
				});
			}
			// Hàm lấy class trạng thái
			function getStatusClass(status) {
				switch (status) {
					case 1: return "table-success";
					case 2: return "table-warning";
					case 3: return "table-danger";
					case 4: return "table-primary";
					case 0: return "table-secondary";
					default: return "";
				}
			}
			// Xử lý tìm kiếm
			$("input[name='search']").on("input", function () {
				let url = new URL(window.location.href);
				url.searchParams.set("search", $(this).val());
				loadJobs(url.toString());
			});

			// Xử lý lọc theo khoảng thời gian Deadline
			$("input[name='deadlineStartDate'], input[name='deadlineEndDate']").change(function () {
				let url = new URL(window.location.href);
				url.searchParams.set("deadlineStartDate", $("input[name='deadlineStartDate']").val());
				url.searchParams.set("deadlineEndDate", $("input[name='deadlineEndDate']").val());
				loadJobs(url.toString());
			});

			// Xử lý lọc theo ngày hoàn thành
			$("input[name='startDate'], input[name='endDate']").change(function () {
				let url = new URL(window.location.href);
				url.searchParams.set("startDate", $("input[name='startDate']").val());
				url.searchParams.set("endDate", $("input[name='endDate']").val());
				loadJobs(url.toString());
			});

			// Xử lý bộ lọc theo tháng deadline
			$("input[name='selectedMonth']").change(function () {
				let url = new URL(window.location.href);
				url.searchParams.set("selectedMonth", $(this).val());
				loadJobs(url.toString());
			});

			// Xử lý bộ lọc trạng thái
			$("#filterStatus").change(function () {
				let url = new URL(window.location.href);
				url.searchParams.set("filterStatus", $(this).val());
				loadJobs(url.toString());
			});

			// Xử lý phân trang
			$(document).on("click", ".pagination-container .page-link", function (e) {
				e.preventDefault();
				let pageUrl = $(this).attr("href");
				if (pageUrl !== "#") {
					loadJobs(pageUrl);
				}
			});

			// Xử lý nút Reset
			$("#resetButton").click(function (e) {
				e.preventDefault();
				// Reset các giá trị input về mặc định
				$("input[name='search']").val('');
				$("input[name='deadlineStartDate']").val('');
				$("input[name='deadlineEndDate']").val('');
				$("input[name='startDate']").val('');
				$("input[name='endDate']").val('');
				$("input[name='selectedMonth']").val('');
				$("#filterStatus").val('');

				// Tạo URL yêu cầu reset các bộ lọc
				let url = new URL(window.location.href);
				url.searchParams.delete("search");
				url.searchParams.delete("deadlineStartDate");
				url.searchParams.delete("deadlineEndDate");
				url.searchParams.delete("startDate");
				url.searchParams.delete("endDate");
				url.searchParams.delete("selectedMonth");
				url.searchParams.delete("filterStatus");

				loadJobs(url.toString());
			});

			// Xử lý cập nhật tiến độ công việc với event delegation
			$("#jobListContainer").on('input', '.progress-slider', function () {
				console.log('Sự kiện input đã được kích hoạt!');
				let jobId = parseInt($(this).data('jobId'));
				let progress = parseFloat($(this).val());
				$(this).next().text(progress + '%');

				$.ajax({
					url: '/EmployeeSystem/Jobs/UpdateProgress',
					method: 'POST',
					contentType: 'application/json',
					data: JSON.stringify({ id: jobId, progress: progress }),
					success: function (data) {
						if (data.success) {
							console.log("Cập nhật tiến độ thành công!");
							let $row = $(`.progress-slider[data-job-id="${jobId}"]`).closest('.job-row');
							let $statusSpan = $row.find('td:nth-child(5) span');
							if ($statusSpan.length) {
								let newStatus = data.newStatus;
								$statusSpan.text(newStatus === 1 ? "Hoàn thành"
									: newStatus === 2 ? "Chưa hoàn thành"
										: newStatus === 3 ? "Hoàn thành muộn"
											: newStatus === 4 ? "Đang xử lý"
												: "Chưa bắt đầu");
								$row.attr('data-status', newStatus);

								// 🔥 Cập nhật lớp CSS của hàng
								$row.removeClass("table-success table-warning table-danger table-primary table-secondary");
								$row.addClass(getStatusClass(newStatus));
							}
							let $completionDateCell = $row.find('td:nth-child(4)');
							if ($completionDateCell.length) {
								if (progress === 100 && data.completionDate) {
									$completionDateCell.text(data.completionDate);
								} else {
									$completionDateCell.text("-");
								}
							}
						} else {
							console.error("Lỗi cập nhật:", data.message);
						}
					},
					error: function (error) {
						console.error('Lỗi:', error);
					}
				});
			});
		});
		document.addEventListener('DOMContentLoaded', function () {
			document.querySelectorAll('.progress-slider').forEach(slider => {
				slider.addEventListener('input', function () {
					console.log('Sự kiện input đã được kích hoạt!');
					let jobId = parseInt(this.dataset.jobId);
					let progress = parseFloat(this.value);
					this.nextElementSibling.textContent = progress + '%';

					fetch('/EmployeeSystem/Jobs/UpdateProgress', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ id: jobId, progress: progress })
					})
						.then(response => response.json())
						.then(data => {
							if (data.success) {
								console.log("Cập nhật tiến độ thành công!");
								let slider = document.querySelector(`.progress-slider[data-job-id="${jobId}"]`);
								let row = slider ? slider.closest('.job-row') : null;
								if (row) {
									let statusSpan = row.querySelector("td:nth-child(5) span");
									if (statusSpan) {
										let newStatus = data.newStatus;
										statusSpan.textContent = newStatus === 1 ? "Hoàn thành"
											: newStatus === 2 ? "Chưa hoàn thành"
												: newStatus === 3 ? "Hoàn thành muộn"
													: newStatus === 4 ? "Đang xử lý"
														: "Chưa bắt đầu";
										row.setAttribute('data-status', newStatus);

										// 🔥 Cập nhật lớp CSS của hàng
										row.classList.remove("table-success", "table-warning", "table-danger", "table-primary", "table-secondary");
										row.classList.add(getStatusClass(newStatus));
									}
									let completionDateCell = row.querySelector("td:nth-child(4)");
									if (completionDateCell) {
										if (progress === 100 && data.completionDate) {
											completionDateCell.textContent = data.completionDate;
										} else {
											completionDateCell.textContent = "-";
										}
									}
								}
							} else {
								console.error("Lỗi cập nhật:", data.message);
							}
						})
						.catch(error => console.error('Lỗi:', error));
				});
			});
		});

	</script>
}


