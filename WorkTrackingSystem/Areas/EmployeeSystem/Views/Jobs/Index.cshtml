@using WorkTrackingSystem.Areas.EmployeeSystem.Models
@using X.PagedList.Mvc.Core
@* @model X.PagedList.IPagedList<WorkTrackingSystem.Models.Score> *@
	@model X.PagedList.IPagedList<WorkTrackingSystem.Areas.EmployeeSystem.Models.JobViewModel>
@{
	ViewData["Title"] = "Danh sách công việc";
	Layout = "~/Areas/EmployeeSystem/Views/Shared/_Employee.cshtml";
}

<h2 class="text-primary text-center py-4">Danh sách Công Việc</h2>
<div class=" mb-3">
	<!-- Lọc theo khoảng thời gian Deadline -->

	<form method="get" class="row gx-3 align-items-end">
		<!-- Lọc theo Deadline -->
		<div class="col-md-4">
			<label class="form-label fw-bold">Deadline từ</label>
			<div class="input-group">
				<input type="date" name="deadlineStartDate" class="form-control" value="@ViewBag.DeadlineStartDate">
				<span class="input-group-text">→</span>
				<input type="date" name="deadlineEndDate" class="form-control" value="@ViewBag.DeadlineEndDate">
			</div>
		</div>

		<!-- Lọc theo Ngày hoàn thành -->
		<div class="col-md-4">
			<label class="form-label fw-bold">Hoàn thành từ</label>
			<div class="input-group">
				<input type="date" name="startDate" class="form-control" value="@ViewBag.StartDate">
				<span class="input-group-text">→</span>
				<input type="date" name="endDate" class="form-control" value="@ViewBag.EndDate">
			</div>
		</div>

		<!-- Nút Lọc -->
		<div class="col-md-2 d-flex justify-content-around">
			<button type="submit" class="btn btn-warning ">
				<i class="fa-solid fa-filter"></i> Lọc
			</button>
			<a asp-action="Index" class="btn btn-secondary"><i class="bi bi-arrow-repeat"></i></a>
		</div>
	</form>

</div>

<!-- Thanh công cụ tìm kiếm và bộ lọc -->

<div class="row gx-3 align-items-end mb-3">
	<!-- Form tìm kiếm và lọc theo Deadline -->
	<form asp-controller="Jobs" asp-action="Index" method="get" class="col-md-10 row gx-3">
		<!-- Ô tìm kiếm -->
		<div class="col-md-5">
			<div class="input-group">
				<input type="text" class="form-control" name="search" placeholder="Nhập tên công việc / Code" value="@Context.Request.Query["search"]" />
			</div>
		</div>

		<!-- Lọc theo Deadline -->
		<div class="col-md-4">
			<div class="input-group">
				<label class="input-group-text">Deadline</label>
				<input type="month" name="selectedMonth" class="form-control" value="@ViewBag.SelectedMonth">
			</div>
		</div>

		<!-- Nút tìm kiếm -->
		<div class="col-md-3">
			<button type="submit" class="btn btn-primary w-100">
				<i class="fa-solid fa-magnifying-glass"></i> Tìm kiếm
			</button>
		</div>
	</form>

	<!-- Bộ lọc trạng thái (nằm ngoài form) -->
	<div class="col-md-2">
		<select id="filterStatus" class="form-select">
			<option value="">Tất cả trạng thái</option>
			<option value="1">Hoàn thành</option>
			<option value="2">Chưa hoàn thành</option>
			<option value="3">Hoàn thành muộn</option>
			<option value="4">Đang xử lý</option>
			<option value="0">Chưa bắt đầu</option>
		</select>
	</div>
</div>

<table class="table table-bordered table-hover  shadow">
	<thead class="table-dark text-white text-center">
		<tr>
			<th>Hạng mục</th>
			<th>Tên công việc</th>
			<th>Hạn chót</th>
			<th>Ngày hoàn thiện</th>
			<th>Trạng thái</th>
			<th>Tiến độ </th>

		</tr>
	</thead>
	<tbody id="jobTable">

		@foreach (var item in Model)
		{
			<tr class="job-row" data-status="@item.ScoreStatus">
				<td>@item.CategoryName</td>
				<td class="job-name">@item.JobName</td>
				<td>@item.Deadline?.ToString("dd/MM/yyyy")</td>
				<td class="text-center">
					@if (item.Progress == 100 && item.CompletionDate.HasValue)
					{
						@item.CompletionDate.Value.ToString("dd/MM/yyyy")
					}
					else
					{
						<text>-</text> <!-- Hiển thị dấu "-" nếu công việc chưa hoàn thành -->
					}
				</td>
				<td class="text-center">
					<span>
						@if (item.ScoreStatus == 1)
						{
							<text>Hoàn thành</text>
						}
						else if (item.ScoreStatus == 2)
						{
							<text>Chưa hoàn thành</text>
						}
						else if (item.ScoreStatus == 3)
						{
							<text>Hoàn thành muộn</text>
						}
						else if (item.ScoreStatus == 4)
						{
							<text>Đang xử lý</text>
						}
						else if(item.ScoreStatus == 0)
						{
							<text>Chưa bắt đầu</text>
						}
					</span>
				</td>
				<td class="text-center">
					<input type="range" class="progress-slider" data-job-id="@item.JobId" value="@item.Progress" min="0" max="100" step="5">
					<span class="progress-value">@item.Progress%</span>
				</td>
			</tr>
		}
	</tbody>
</table>
@if (Model.TotalItemCount > Model.PageSize) // Chỉ hiển thị phân trang nếu số công việc > limit
{
	@Html.PagedListPager(Model, page => Url.Action("Index", new
		{
			page = page,
			filterStatus = ViewBag.FilterStatus,
			search = ViewBag.Search,
			selectedMonth = ViewBag.SelectedMonth,
			startDate = ViewBag.StartDate,
			endDate = ViewBag.EndDate,
			deadlineStartDate = ViewBag.deadlineStartDate,
			deadlineEndDate = ViewBag.deadlineEndDate
		}), new PagedListRenderOptions
{
	LiElementClasses = new string[] { "page-item" },
	PageClasses = new string[] { "page-link" },
	DisplayLinkToFirstPage = PagedListDisplayMode.Always,
	DisplayLinkToLastPage = PagedListDisplayMode.Always,
	DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
	DisplayLinkToNextPage = PagedListDisplayMode.Always,
	DisplayEllipsesWhenNotShowingAllPageNumbers = true,
	MaximumPageNumbersToDisplay = 5
})
}
@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			// let searchBox = document.getElementById('searchBox');
			let filterStatus = document.getElementById('filterStatus');

		
			let filterStatusFromViewBag = "@(ViewBag.FilterStatus ?? "")";

			function applyFilters() {
				
			
				let selectedStatus = filterStatus.value;
				let url = new URL(window.location.href);
				
				url.searchParams.set("filterStatus", selectedStatus);
				// console.log("fiter", selectedStatus)
				// url.searchParams.set("page", 1); // Reset về trang 1 sau khi lọc
				window.location.href = url.toString();
			}
		
			

			// Gửi request khi thay đổi trạng thái
			filterStatus.addEventListener("change", applyFilters);
			// document.addEventListener('DOMContentLoaded', function () {
				let deadlineStart = document.querySelector('input[name="deadlineStartDate"]');
				let deadlineEnd = document.querySelector('input[name="deadlineEndDate"]');

				function applyDeadlineFilter() {
					let url = new URL(window.location.href);
					url.searchParams.set("deadlineStartDate", deadlineStart.value);
					url.searchParams.set("deadlineEndDate", deadlineEnd.value);
					url.searchParams.set("page", 1);
					window.location.href = url.toString();
				}
				// deadlineStart.addEventListener("change", applyDeadlineFilter);
				// deadlineEnd.addEventListener("change", applyDeadlineFilter);
			// });

		});
		document.addEventListener('DOMContentLoaded', function () {
			document.querySelectorAll('.progress-slider').forEach(slider => {

				slider.addEventListener('input', function () {
					console.log('Sự kiện input đã được kích hoạt!');
					let jobId = parseInt(this.dataset.jobId);
					let progress = parseFloat(this.value);
					this.nextElementSibling.textContent = progress + '%';

					fetch('/EmployeeSystem/Jobs/UpdateProgress', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ id: jobId, progress: progress })
					})
						.then(response => response.json())
						.then(data => {
							if (data.success) {
								console.log("Cập nhật tiến độ thành công!");

								// 🔥 Tìm hàng công việc đúng cách 🔥
								let slider = document.querySelector(`.progress-slider[data-job-id="${jobId}"]`);
								let row = slider ? slider.closest('.job-row') : null;  // Tìm thẻ <tr> cha
								if (row) {
									let statusSpan = row.querySelector("td:nth-child(5) span");
									if (statusSpan) {
										let newStatus = data.newStatus;
										statusSpan.textContent = newStatus === 1 ? "Hoàn thành"
											: newStatus === 2 ? "Chưa hoàn thành"
												: newStatus === 3 ? "Hoàn thành muộn"
													: newStatus === 4 ? "Đang xử lý"
														: "Chưa bắt đầu";
										// Cập nhật `data-status`
										row.setAttribute('data-status', newStatus);

									} else {
										console.warn(`Không tìm thấy phần tử trạng thái trong hàng có jobId = ${jobId}`);
									}
									let completionDateCell = row.querySelector("td:nth-child(4)");
									if (completionDateCell) {
										if (progress === 100 && data.completionDate) {
											completionDateCell.textContent = data.completionDate;
										} else {
											completionDateCell.textContent = "-";
										}
									}
								} else {
									console.warn(`Không tìm thấy hàng công việc cho jobId = ${jobId}`);
								}
							} else {
								console.error("Lỗi cập nhật:", data.message);
							}
						})
						.catch(error => console.error('Lỗi:', error));
				});
			});
		})
	</script>
}


<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
