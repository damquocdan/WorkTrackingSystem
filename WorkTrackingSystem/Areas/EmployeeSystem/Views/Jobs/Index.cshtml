@model IEnumerable<WorkTrackingSystem.Models.Job>

@{
    ViewData["Title"] = "Danh sách công việc";
    Layout = "~/Areas/ProjectManager/Views/Shared/_ProjectManager.cshtml";
}

<h2 class="text-primary text-center mb-4">Danh sách Công Việc</h2>

<!-- Thanh công cụ tìm kiếm và bộ lọc -->
<div class="d-flex justify-content-between mb-3">
    <!-- Ô tìm kiếm -->
    <input type="text" id="searchBox" class="form-control w-25" placeholder="Tìm kiếm công việc...">

    <!-- Bộ lọc trạng thái -->
    <select id="filterStatus" class="form-select w-25">
        <option value="">Tất cả trạng thái</option>
        <option value="0">Chưa bắt đầu</option>
        <option value="1">Đang thực hiện</option>
        <option value="2">Hoàn thành</option>
        <option value="3">Trễ hạn</option>
    </select>
</div>

<table class="table table-bordered table-hover shadow">
    <thead class="table-primary text-center">
        <tr>
            <th>Tên công việc</th>
            <th>Hạn chót</th>
            <th>Trạng thái</th>
            <th>Tiến độ</th>
        </tr>
    </thead>
    <tbody id="jobTable">
        @foreach (var item in Model)
        {
            <tr class="job-row" data-status="@item.Status">
                <td class="job-name">@item.Name</td>
                <td>@item.Deadline1?.ToString("dd/MM/yyyy")</td>
                <td class="text-center">
                    <select class="form-select status-dropdown" data-job-id="@item.Id">
                        <option value="0" selected="@(item.Status == 0 ? "selected" : null)">Chưa bắt đầu</option>
                        <option value="1" selected="@(item.Status == 1 ? "selected" : null)">Đang thực hiện</option>
                        <option value="2" selected="@(item.Status == 2 ? "selected" : null)">Hoàn thành</option>
                        <option value="3" selected="@(item.Status == 3 ? "selected" : null)">Trễ hạn</option>
                    </select>
                </td>
                <td class="text-center">
                    <input type="range" class="progress-slider" data-job-id="@item.Id" value="@item.ProgressAssessment" min="0" max="100" step="5">
                    <span class="progress-value">@item.ProgressAssessment%</span>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let searchBox = document.getElementById('searchBox');
            let filterStatus = document.getElementById('filterStatus');
            console.log("check1")
            // Chức năng tìm kiếm
            searchBox.addEventListener('input', function () {
                let searchTerm = this.value.toLowerCase();
                document.querySelectorAll('.job-row').forEach(row => {
                    let jobName = row.querySelector('.job-name').textContent.toLowerCase();
                    row.style.display = jobName.includes(searchTerm) ? '' : 'none';
                });
            });

            // Chức năng lọc công việc theo trạng thái
            filterStatus.addEventListener('change', function () {
                let selectedStatus = this.value;
                document.querySelectorAll('.job-row').forEach(row => {
                    let jobStatus = row.getAttribute('data-status');
                    row.style.display = (selectedStatus === "" || jobStatus === selectedStatus) ? '' : 'none';
                });
            });
            console.log("check2")
            // Cập nhật tiến độ
            document.querySelectorAll('.progress-slider').forEach(slider => {
                slider.addEventListener('input', function () {
                    let jobId = parseInt(this.dataset.jobId)
                    let progress = parseFloat(this.value);
                    this.nextElementSibling.textContent = progress + '%';

                    fetch('/EmployeeSystem/Jobs/UpdateProgress', { // Đảm bảo đường dẫn đúng
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: jobId, progress: progress })
                    }).then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                console.log("Cập nhật tiến độ thành công!");
                            } else {
                                console.error("Lỗi cập nhật:", data.message);
                            }
                        })
                        .catch(error => console.error('Lỗi:', error));
                });
            });

            console.log("check3")
            // Cập nhật trạng thái
            document.querySelectorAll('.status-dropdown').forEach(select => {
                select.addEventListener('change', function () {
                    let jobId = parseInt(this.dataset.jobId);
                    let status = parseInt(this.value);
                    console.log("this.dataset:",this.value)
                    fetch('/EmployeeSystem/Jobs/UpdateStatus', { // Đảm bảo đúng đường dẫn API
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ jobId: jobId, status: status })
                    }).then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    }).then(data => {
                        console.log("Server response:", data);
                        if (data.success) {
                            console.log("Cập nhật trạng thái thành công!");
                        } else {
                            console.error("Lỗi cập nhật:", data.message);
                        }
                    }).catch(error => console.error('Lỗi:', error));
                });
            });

        });
    </script>
}
